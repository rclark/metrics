// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	metrics "github.com/armon/go-metrics"
	mock "github.com/stretchr/testify/mock"
)

// GoMetrics is an autogenerated mock type for the goMetrics type
type GoMetrics struct {
	mock.Mock
}

type GoMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *GoMetrics) EXPECT() *GoMetrics_Expecter {
	return &GoMetrics_Expecter{mock: &_m.Mock}
}

// AddSampleWithLabels provides a mock function with given fields: key, val, labels
func (_m *GoMetrics) AddSampleWithLabels(key []string, val float32, labels []metrics.Label) {
	_m.Called(key, val, labels)
}

// GoMetrics_AddSampleWithLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSampleWithLabels'
type GoMetrics_AddSampleWithLabels_Call struct {
	*mock.Call
}

// AddSampleWithLabels is a helper method to define mock.On call
//   - key []string
//   - val float32
//   - labels []metrics.Label
func (_e *GoMetrics_Expecter) AddSampleWithLabels(key interface{}, val interface{}, labels interface{}) *GoMetrics_AddSampleWithLabels_Call {
	return &GoMetrics_AddSampleWithLabels_Call{Call: _e.mock.On("AddSampleWithLabels", key, val, labels)}
}

func (_c *GoMetrics_AddSampleWithLabels_Call) Run(run func(key []string, val float32, labels []metrics.Label)) *GoMetrics_AddSampleWithLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(float32), args[2].([]metrics.Label))
	})
	return _c
}

func (_c *GoMetrics_AddSampleWithLabels_Call) Return() *GoMetrics_AddSampleWithLabels_Call {
	_c.Call.Return()
	return _c
}

func (_c *GoMetrics_AddSampleWithLabels_Call) RunAndReturn(run func([]string, float32, []metrics.Label)) *GoMetrics_AddSampleWithLabels_Call {
	_c.Call.Return(run)
	return _c
}

// IncrCounterWithLabels provides a mock function with given fields: key, val, labels
func (_m *GoMetrics) IncrCounterWithLabels(key []string, val float32, labels []metrics.Label) {
	_m.Called(key, val, labels)
}

// GoMetrics_IncrCounterWithLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrCounterWithLabels'
type GoMetrics_IncrCounterWithLabels_Call struct {
	*mock.Call
}

// IncrCounterWithLabels is a helper method to define mock.On call
//   - key []string
//   - val float32
//   - labels []metrics.Label
func (_e *GoMetrics_Expecter) IncrCounterWithLabels(key interface{}, val interface{}, labels interface{}) *GoMetrics_IncrCounterWithLabels_Call {
	return &GoMetrics_IncrCounterWithLabels_Call{Call: _e.mock.On("IncrCounterWithLabels", key, val, labels)}
}

func (_c *GoMetrics_IncrCounterWithLabels_Call) Run(run func(key []string, val float32, labels []metrics.Label)) *GoMetrics_IncrCounterWithLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(float32), args[2].([]metrics.Label))
	})
	return _c
}

func (_c *GoMetrics_IncrCounterWithLabels_Call) Return() *GoMetrics_IncrCounterWithLabels_Call {
	_c.Call.Return()
	return _c
}

func (_c *GoMetrics_IncrCounterWithLabels_Call) RunAndReturn(run func([]string, float32, []metrics.Label)) *GoMetrics_IncrCounterWithLabels_Call {
	_c.Call.Return(run)
	return _c
}

// SetGaugeWithLabels provides a mock function with given fields: key, val, labels
func (_m *GoMetrics) SetGaugeWithLabels(key []string, val float32, labels []metrics.Label) {
	_m.Called(key, val, labels)
}

// GoMetrics_SetGaugeWithLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGaugeWithLabels'
type GoMetrics_SetGaugeWithLabels_Call struct {
	*mock.Call
}

// SetGaugeWithLabels is a helper method to define mock.On call
//   - key []string
//   - val float32
//   - labels []metrics.Label
func (_e *GoMetrics_Expecter) SetGaugeWithLabels(key interface{}, val interface{}, labels interface{}) *GoMetrics_SetGaugeWithLabels_Call {
	return &GoMetrics_SetGaugeWithLabels_Call{Call: _e.mock.On("SetGaugeWithLabels", key, val, labels)}
}

func (_c *GoMetrics_SetGaugeWithLabels_Call) Run(run func(key []string, val float32, labels []metrics.Label)) *GoMetrics_SetGaugeWithLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(float32), args[2].([]metrics.Label))
	})
	return _c
}

func (_c *GoMetrics_SetGaugeWithLabels_Call) Return() *GoMetrics_SetGaugeWithLabels_Call {
	_c.Call.Return()
	return _c
}

func (_c *GoMetrics_SetGaugeWithLabels_Call) RunAndReturn(run func([]string, float32, []metrics.Label)) *GoMetrics_SetGaugeWithLabels_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *GoMetrics) Shutdown() {
	_m.Called()
}

// GoMetrics_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type GoMetrics_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *GoMetrics_Expecter) Shutdown() *GoMetrics_Shutdown_Call {
	return &GoMetrics_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *GoMetrics_Shutdown_Call) Run(run func()) *GoMetrics_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GoMetrics_Shutdown_Call) Return() *GoMetrics_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *GoMetrics_Shutdown_Call) RunAndReturn(run func()) *GoMetrics_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGoMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoMetrics creates a new instance of GoMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoMetrics(t mockConstructorTestingTNewGoMetrics) *GoMetrics {
	mock := &GoMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
